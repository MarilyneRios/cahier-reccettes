//models
import User from "../models/userModel.js";
//utils
import { sendResetEmail } from "../utils/emailService.js";
import { errorHandler } from "../utils/error.js";
//crypt
import jwt from "jsonwebtoken";
import bcryptjs from "bcryptjs";

// test
export const display = (req, res) => {
  console.log("display request received");
  res.json({
    message: "hello world on api/authRoutes and authControllers",
  });
};

// @desc    Cr√©er un nouvel utilisateur
// @route   POST /api/auth/signup
// @access  Public
export const signup = async (req, res, next) => {
  const { username, email, password, questionSecret, reponseSecret } = req.body;
  console.log("req.body re√ßu :", req.body);
  try {
    // V√©rifier la pr√©sence des champs obligatoires
    if (!password || !questionSecret || !reponseSecret) {
      return res
        .status(400)
        .json({ message: "Mot de passe, question secr√®te et r√©ponse requis." });
    }

    // V√©rifier si la question est bien dans l'√©num
    const allowedQuestions = [
      "Quel est le pr√©nom de votre premier animal ?",
      "Quelle est votre ville de naissance ?",
      "Quel est le nom de votre plat pr√©f√©r√© ?",
      "Quelle est votre couleur pr√©f√©r√©e ?",
      "Quel est le deuxi√®me pr√©nom de votre m√®re ?",
    ];

    if (!allowedQuestions.includes(questionSecret)) {
      return res.status(400).json({ message: "Question secr√®te invalide." });
    }

    // Hashage du mot de passe et de la r√©ponse secr√®te
    const hashedPassword = bcryptjs.hashSync(password, 10);
    const hashedReponseSecret = bcryptjs.hashSync(reponseSecret, 10);

    // Cr√©ation du nouvel utilisateur
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      questionSecret,
      reponseSecret: hashedReponseSecret,
    });

    await newUser.save();
    res.status(201).json({ message: "Inscription r√©ussie." });
  } catch (error) {
    // Gestion des erreurs de duplication d'email ou username
    if (error.code === 11000) {
      const duplicateField = Object.keys(error.keyPattern)[0];
      return res.status(400).json({
        message: `${
          duplicateField === "email" ? "Email" : "Pseudo"
        } d√©j√† utilis√©.`,
      });
    }
    next(error);
  }
};

// @desc    Connexion d'un utilisateur existant (authentification classique)
// @route   POST /api/auth/signin
// @access  Public
export const signin = async (req, res, next) => {
  const { email, password } = req.body;

  try {
    // V√©rification de l'existence de l'utilisateur
    const validUser = await User.findOne({ email });
    if (!validUser) {
      return next(errorHandler(404, "Utilisateur non trouv√©."));
    }

    // V√©rification du mot de passe
    const validPassword = bcryptjs.compareSync(password, validUser.password);
    if (!validPassword) {
      return next(errorHandler(401, "Identifiants incorrects."));
    }

    // G√©n√©ration du token avec expiration
    const token = jwt.sign({ id: validUser._id }, process.env.JWT_SECRET, {
      expiresIn: "4h",
    });

    // Suppression du mot de passe des donn√©es utilisateur retourn√©es
    const { password: hashedPassword, ...userData } = validUser._doc;

    // D√©finir une expiration pour le cookie
    const expiryDate = new Date(Date.now() + 4 * 60 * 60 * 1000); // 4h en ms

    res
      .cookie("access_token", token, { httpOnly: true, expires: expiryDate })
      .status(200)
      .json({ ...userData, token });
  } catch (error) {
    next(error);
  }
};

// @desc    Connexion d'un utilisateur via Google (avec cr√©ation de compte si n√©cessaire)
// @route   POST /api/auth/google
// @access  Public
export const google = async (req, res, next) => {
  try {
    const user = await User.findOne({ email: req.body.email });
    if (user) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
        expiresIn: "4h",
      });
      const { password: hashedPassword, ...userData } = user._doc;
      const expiryDate = new Date(Date.now() + 14400000); // 4 heures
      res
        .cookie("access_token", token, {
          httpOnly: true,
          expires: expiryDate,
        })
        .status(200)
        .json({ ...userData, token });
    } else {
      const generatedPassword =
        Math.random().toString(36).slice(-8) +
        Math.random().toString(36).slice(-8);
      const hashedPassword = bcryptjs.hashSync(generatedPassword, 10);
      const newUser = new User({
        username:
          req.body.name.split(" ").join("").toLowerCase() +
          Math.random().toString(36).slice(-8),
        email: req.body.email,
        password: hashedPassword,
        profilePicture: req.body.photo,
      });
      await newUser.save();
      const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
        expiresIn: "4h",
      });
      const { password: hashedPassword2, ...userData } = newUser._doc;
      const expiryDate = new Date(Date.now() + 14400000); // 4 heures
      res
        .cookie("access_token", token, {
          httpOnly: true,
          expires: expiryDate,
        })
        .status(200)
        .json({ ...userData, token });
    }
  } catch (error) {
    next(error);
  }
};

// @desc    D√©connexion d'un utilisateur
// @route   GET /api/auth/signout
// @access  Public
export const signout = (req, res) => {
  console.log("Signout request received");
  try {
    // Suppression du cookie access_token
    res.clearCookie("access_token");
    console.log("Cookie access_token cleared");

    // V√©rification si le cookie est vraiment supprim√©
    const cookiesAfterClear = req.cookies["access_token"];
    if (!cookiesAfterClear) {
      console.log("Cookies successfully cleared");
    } else {
      console.log("Cookies not cleared:", cookiesAfterClear);
    }

    // R√©ponse de succ√®s
    res.status(200).json("Signout successful!");
  } catch (error) {
    // En cas d'erreur, log et r√©ponse d'erreur
    console.error("Error during logout:", error);
    res.status(500).json("Logout failed");
  }
};

// @desc    R√©cup√®re la question secr√®te d'un utilisateur √† partir de son email
// @route   GET /api/auth/resetPassword
// @access  Public
export const getUserByEmail = async (req, res) => {
  const { email } = req.query;
  console.log("üëâ Requ√™te re√ßue pour la r√©cup√©ration de la question secr√®te.");
  console.log("üìß Email fourni :", email);
  try {
    const user = await User.findOne({ email }).select("email questionSecret"); 
   
    if (!user) {
      console.warn("‚ö†Ô∏è Aucun utilisateur trouv√© avec cet email :", email);
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    res.status(200).json({ questionSecret: user.questionSecret });

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de l'utilisateur :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};



// @desc    V√©rifie la r√©ponse secr√®te √† une question
// @route   POST /api/auth/verifyReponseSecret
// @access  Public
export const verifyReponseSecret = async (req, res) => {
  console.log("üì¶ Corps re√ßu :", req.body);

  //r√©cup√®r email et reponseSecret du body
  const { email,  reponseSecret } = req.body;
  console.log("üëâ Requ√™te re√ßue pour v√©rifier la r√©ponse secr√®te √† une question.");
  console.log("üìß Email + r√©ponse fournie :", email, reponseSecret);

  try {
    //r√©cup√®re email et reponseSecret de bdd
    const user = await User.findOne({ email }).select("email reponseSecret"); 
    // v√©rification user existe
    if (!user) {
      console.warn("‚ùå Utilisateur non trouv√© pour email:", email);
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // v√©rification reponseSecret existe
    if (!user.reponseSecret) {
      console.warn("‚ùå La r√©ponse secr√®te n'est pas d√©finie pour l'utilisateur:", email);
      return res.status(400).json({ message: "La r√©ponse secr√®te n'est pas d√©finie pour cet utilisateur" });
    }

    // d√©crypter user.reponseSecret afin depouvoir comparer avec reponseSecret du body
    const isMatch = await bcryptjs.compare(reponseSecret, user.reponseSecret);

    if (isMatch) {
      console.log("‚úÖ R√©ponse secr√®te correcte pour", email);
      return res.status(200).json({ success: true });
    } else {
      console.warn("‚ùå R√©ponse secr√®te incorrecte pour", email);
      return res.status(401).json({ message: "R√©ponse secr√®te incorrecte" });
    }
  } catch (error) {
    console.error("‚ùå Stack :", error.stack);
    res.status(500).json({ message: "Erreur serveur" });
  }
};


//@desc envoie le mail avec lien pour resetPassword
// @route   POST /api/auth/sendResetEmail
// @access  Public

export const resetPasswordRequest = async (req, res) => {
  const { email } = req.body;
  console.log("email de resetPasswordRequest " , email)

  // Logique pour r√©cup√©rer l'utilisateur et envoyer l'email
  const user = await User.findOne({ email });
  console.log("user de resetPasswordRequest", user)


  if (!user) {
    return res.status(404).json({ message: 'Utilisateur non trouv√©' });
  }

  try {
    await sendResetEmail(user.email, user._id);
    return res.status(200).json({ message: 'Email envoy√© avec succ√®s' });
  } catch (err) {
    console.error("Erreur capt√©e dans resetPasswordRequest :", err);
    return res.status(500).json({ message: 'Erreur lors de l\'envoi de l\'email' });
  }
  
};